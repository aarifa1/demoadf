{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "amjetaris-df"
		},
		"blob_keyvoult_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "sc-kv-blob1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_nodept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "nodeptout",
						"container": "input-src"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "emp_name",
						"type": "String"
					},
					{
						"name": "emp_salary",
						"type": "String"
					},
					{
						"name": "dept_id",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_out')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage3_csv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output-dest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_join')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('joinoutput','_',formatDateTime(utcNow()))",
							"type": "Expression"
						},
						"container": "outputwrangling"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Error",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_parquetout')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(dataset().filename,'_',formatDateTime(utcNow(),'yyyy-mm-dd'))",
							"type": "Expression"
						},
						"container": "outputwrangling"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_dynamic_dest2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sql_dynamicval2",
					"type": "LinkedServiceReference",
					"parameters": {
						"domain_dest": {
							"value": "@dataset().domain_dest",
							"type": "Expression"
						},
						"db_dest": {
							"value": "@dataset().db_dest",
							"type": "Expression"
						},
						"user_dest": {
							"value": "@dataset().user_dest",
							"type": "Expression"
						},
						"pwd_dest": {
							"value": "@dataset().pwd_dest",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"domain_dest": {
						"type": "String"
					},
					"db_dest": {
						"type": "String"
					},
					"user_dest": {
						"type": "String"
					},
					"pwd_dest": {
						"type": "String"
					},
					"tab_dest": {
						"type": "String"
					},
					"sch_dest": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().sch_dest",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tab_dest",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_dynamic_src1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_dynamicval1",
					"type": "LinkedServiceReference",
					"parameters": {
						"domain_namesrc": {
							"value": "@dataset().domain_src",
							"type": "Expression"
						},
						"user_namesrc": {
							"value": "@dataset().user_src",
							"type": "Expression"
						},
						"db_namesrc": {
							"value": "@dataset().db_src",
							"type": "Expression"
						},
						"pwd_src": {
							"value": "@dataset().pwd_src",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"db_src": {
						"type": "string"
					},
					"user_src": {
						"type": "string"
					},
					"pwd_src": {
						"type": "string"
					},
					"domain_src": {
						"type": "string"
					},
					"tab_src": {
						"type": "string"
					},
					"sch_src": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().sch_src",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tab_src",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_testing_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "testingout",
						"container": "input-src"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "emp_name",
						"type": "String"
					},
					{
						"name": "emp_salary",
						"type": "String"
					},
					{
						"name": "dept_id",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wrangling1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet2",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp_file12.xlsx",
						"container": "inputwrangling"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "emp_name",
						"type": "String"
					},
					{
						"name": "emp_salary",
						"type": "String"
					},
					{
						"name": "dept_id",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wrangling2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DEPT.xlsx",
						"container": "inputwrangling"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "dep_id",
						"type": "String"
					},
					{
						"name": "dept_name",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/samjet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sourcelink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "amjet.xlsx",
						"container": "khancont"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_ex1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lk_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp tab.xlsx",
						"container": "conrg107"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Emp_no",
						"type": "String"
					},
					{
						"name": "Emp_name",
						"type": "String"
					},
					{
						"name": "Emp_salary",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_keyvoult')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('blob_keyvoult_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PP_parameterizecp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "parameterizeCP",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_dynamic_src1",
								"type": "DatasetReference",
								"parameters": {
									"db_src": {
										"value": "@pipeline().parameters.db_src",
										"type": "Expression"
									},
									"user_src": {
										"value": "@pipeline().parameters.user_src",
										"type": "Expression"
									},
									"pwd_src": {
										"value": "@pipeline().parameters.pwd_src",
										"type": "Expression"
									},
									"domain_src": {
										"value": "@pipeline().parameters.domain_src",
										"type": "Expression"
									},
									"tab_src": {
										"value": "@pipeline().parameters.tab_src",
										"type": "Expression"
									},
									"sch_src": {
										"value": "@pipeline().parameters.sch_src",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_dynamic_dest2",
								"type": "DatasetReference",
								"parameters": {
									"domain_dest": {
										"value": "@pipeline().parameters.domain_dest",
										"type": "Expression"
									},
									"db_dest": {
										"value": "@pipeline().parameters.db_dest",
										"type": "Expression"
									},
									"user_dest": {
										"value": "@pipeline().parameters.user_dest",
										"type": "Expression"
									},
									"pwd_dest": {
										"value": "@pipeline().parameters.pwd_dest",
										"type": "Expression"
									},
									"tab_dest": {
										"value": "@pipeline().parameters.tab_dest",
										"type": "Expression"
									},
									"sch_dest": {
										"value": "@pipeline().parameters.sch_dest",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"domain_src": {
						"type": "string"
					},
					"domain_dest": {
						"type": "string"
					},
					"db_src": {
						"type": "string"
					},
					"db_dest": {
						"type": "string"
					},
					"user_src": {
						"type": "string"
					},
					"user_dest": {
						"type": "string"
					},
					"pwd_src": {
						"type": "string"
					},
					"pwd_dest": {
						"type": "string"
					},
					"tab_src": {
						"type": "string"
					},
					"tab_dest": {
						"type": "string"
					},
					"sch_src": {
						"type": "string"
					},
					"sch_dest": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-02T13:43:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_dynamic_src1')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_dynamic_dest2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PP_set variable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "wrangling_copydata",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "filename_out",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"metadata": [
										{
											"name": "filename",
											"value": {
												"value": "@pipeline().parameters.filename",
												"type": "Expression"
											}
										}
									]
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet_test",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "filename_out",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "filename",
							"value": {
								"value": "@concat(pipeline().parameters.filename,'_',formatDateTime(utcNow(),'yyyy-mm-dd'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"variables": {
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T09:42:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "dep_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dept_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "dept_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dept_name",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_wrangling2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {
									"database_name": {
										"value": "@pipeline().parameters.databasename",
										"type": "Expression"
									},
									"sourcetable": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "ds_wrangling2",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"databasename": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T09:42:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_parameterise_copydata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Parameterised data copy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {
									"database_name": {
										"value": "@pipeline().parameters.database_name",
										"type": "Expression"
									},
									"sourcetable": {
										"value": "@pipeline().parameters.sourcetable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {
									"database_name": {
										"value": "@pipeline().parameters.database_name",
										"type": "Expression"
									},
									"destinationtab": {
										"value": "@pipeline().parameters.destinationtab",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"sourcetable": {
						"type": "string"
					},
					"destinationtab": {
						"type": "string"
					},
					"database_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-02T07:02:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_parquettocsv_delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "exceltodb1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "parquet to csv",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "parquet_setvariable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dest_csv",
								"type": "DatasetReference",
								"parameters": {
									"file_name": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "parquet_setvariable",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "file_name1",
							"value": {
								"value": "@concat(pipeline().parameters.file_name,'-',formatDateTime(utcNow(),'yyyy-mm-dd'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"variables": {
					"file_name1": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T17:24:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_exist_deptid')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference"
							},
							"name": "employeedeptid"
						},
						{
							"dataset": {
								"referenceName": "ds_wrangling2",
								"type": "DatasetReference"
							},
							"name": "deptsrc1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "csvexistdeptid"
						}
					],
					"transformations": [
						{
							"name": "empdeptidexist"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeedeptid",
						"source(output(",
						"          dep_id as string,",
						"          dept_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> deptsrc1",
						"employeedeptid, deptsrc1 exists(dept_id == dep_id,",
						"     negate:true,",
						"     broadcast: 'auto')~> empdeptidexist",
						"empdeptidexist sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['existdeptid'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> csvexistdeptid"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]",
				"[concat(variables('factoryId'), '/datasets/ds_wrangling2')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_union_emp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_csv_input",
								"type": "DatasetReference"
							},
							"name": "financeemp"
						},
						{
							"dataset": {
								"referenceName": "ds_testing_emp",
								"type": "DatasetReference"
							},
							"name": "testingout"
						},
						{
							"dataset": {
								"referenceName": "ds_archi_emp",
								"type": "DatasetReference"
							},
							"name": "architectemp"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_nodept",
								"type": "DatasetReference"
							},
							"name": "nodeptemp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "empunionsink"
						}
					],
					"transformations": [
						{
							"name": "unionemp"
						},
						{
							"name": "unionselectemp"
						},
						{
							"name": "sortemp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> financeemp",
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> testingout",
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> architectemp",
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> nodeptemp",
						"financeemp, testingout, architectemp, nodeptemp union(byName: true)~> unionemp",
						"unionemp select(mapColumn(",
						"          emp_id,",
						"          emp_names = emp_name,",
						"          dept_id,",
						"          emp_salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> unionselectemp",
						"unionselectemp sort(asc(emp_names, true)) ~> sortemp",
						"sortemp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as integer,",
						"          emp_name as string,",
						"          emp_salary as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> empunionsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_testing_emp')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_nodept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFconditionalsplitDEPT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference"
							},
							"name": "employeedeptid"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "csfinancesink"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "csarchitectsink"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "cstestingout"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "csnodept"
						}
					],
					"transformations": [
						{
							"name": "departmentsoutput"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeedeptid",
						"employeedeptid split(equals(dept_id,'100'),",
						"     equals(dept_id,'101'),",
						"     equals(dept_id,'102'),",
						"     disjoint: false) ~> departmentsoutput@(financeout, testingout, architectout, nodept)",
						"departmentsoutput@financeout sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['financeout'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> csfinancesink",
						"departmentsoutput@architectout sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['architectout'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> csarchitectsink",
						"departmentsoutput@testingout sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['testingout'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> cstestingout",
						"departmentsoutput@nodept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['nodeptout'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> csnodept"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_out')]"
			]
		}
	]
}