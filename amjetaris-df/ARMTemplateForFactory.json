{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "amjetaris-df"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureBlobStorage3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage3'"
		},
		"AzureBlobStorage3_csv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage3_csv'"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase111_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase111'"
		},
		"blob_wrangling_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'blob_wrangling'"
		},
		"destlink_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'destlink'"
		},
		"lk_dest_db1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'lk_dest_db1'"
		},
		"lk_destdb1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'lk_destdb1'"
		},
		"lk_dstdb1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'lk_dstdb1'"
		},
		"lk_excel1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'lk_excel1'"
		},
		"lk_exceldb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'lk_exceldb'"
		},
		"lk_source_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lk_source'"
		},
		"lk_source1excel_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lk_source1excel'"
		},
		"lk_src_ex1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lk_src_ex1'"
		},
		"lk_srcex1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lk_srcex1'"
		},
		"lk_srcexl1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lk_srcexl1'"
		},
		"lnk_sql_table1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'lnk_sql_table1'"
		},
		"lnk_sql_table2_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'lnk_sql_table2'"
		},
		"sourcelink_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sourcelink'"
		},
		"sqldb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'sqldb'"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-blob1.vault.azure.net/"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "aarif.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dbaarif1"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sal-aarif1"
		},
		"AzureSqlDatabase111_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "aarif.database.windows.net"
		},
		"AzureSqlDatabase111_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dbaarif1"
		},
		"AzureSqlDatabase111_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": " sal-aarif1"
		},
		"Sql_dynamicval2_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "@{linkedService().domain_dest}"
		},
		"Sql_dynamicval2_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().db_dest}"
		},
		"Sql_dynamicval2_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().user_dest}"
		},
		"blob_keyvoult_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "sc-kv-blob1"
		},
		"destlink_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "servkhan.database.windows.net"
		},
		"destlink_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "rufai"
		},
		"destlink_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "serv1"
		},
		"lk_dest_db1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sdsrg107.database.windows.net"
		},
		"lk_dest_db1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dbrg107"
		},
		"lk_dest_db1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "salrg107"
		},
		"lk_destdb1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sdsrg107.database.windows.net"
		},
		"lk_destdb1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dbrg107"
		},
		"lk_destdb1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "salrg107"
		},
		"lk_dstdb1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sdsrg107.database.windows.net"
		},
		"lk_dstdb1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dbrg107"
		},
		"lk_dstdb1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "salrg107"
		},
		"lk_excel1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sdsrg107.database.windows.net"
		},
		"lk_excel1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dbrg107"
		},
		"lk_excel1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "salrg107"
		},
		"lk_exceldb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sdsrg107"
		},
		"lk_exceldb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dbrg107"
		},
		"lk_exceldb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "salrg107"
		},
		"lnk_sql_table1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "aarif.database.windows.net"
		},
		"lnk_sql_table1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().database_name}"
		},
		"lnk_sql_table1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sal-aarif1"
		},
		"lnk_sql_table2_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "aarif.database.windows.net"
		},
		"lnk_sql_table2_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().database_name}"
		},
		"lnk_sql_table2_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sal-aarif1"
		},
		"sql_dynamicval1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "@{linkedService().domain_namesrc}"
		},
		"sql_dynamicval1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().db_namesrc}"
		},
		"sql_dynamicval1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().user_namesrc}"
		},
		"sqldb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "aarif.database.windows.net"
		},
		"sqldb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dbaarif1"
		},
		"sqldb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sal-aarif1"
		},
		"trg_sto_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/2b379197-27b4-4219-8bd6-b67f50ad9ab5/resourceGroups/khan1/providers/Microsoft.Storage/storageAccounts/amjetstorage"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PP_PQ_Wrangling')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PQ-Wrangling1",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "powerquery2",
								"type": "DataFlowReference",
								"datasetParameters": {
									"ds_wrangling1": {},
									"ds_wrangling2": {},
									"UserQuerydscsvout": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQuerydscsvout",
											"dataset": {
												"referenceName": "ds_csv_out",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> UserQuerydscsvout"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T09:42:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/powerquery2')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PP_derived_json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dfderived",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFderived-json",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcexDF1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T06:58:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFderived-json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PP_df_join')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "joinDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "mappingdataflow_join",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"dept": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T06:58:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/mappingdataflow_join')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PP_parameterizecp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "parameterizeCP",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_dynamic_src1",
								"type": "DatasetReference",
								"parameters": {
									"db_src": {
										"value": "@pipeline().parameters.db_src",
										"type": "Expression"
									},
									"user_src": {
										"value": "@pipeline().parameters.user_src",
										"type": "Expression"
									},
									"pwd_src": {
										"value": "@pipeline().parameters.pwd_src",
										"type": "Expression"
									},
									"domain_src": {
										"value": "@pipeline().parameters.domain_src",
										"type": "Expression"
									},
									"tab_src": {
										"value": "@pipeline().parameters.tab_src",
										"type": "Expression"
									},
									"sch_src": {
										"value": "@pipeline().parameters.sch_src",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_dynamic_dest2",
								"type": "DatasetReference",
								"parameters": {
									"domain_dest": {
										"value": "@pipeline().parameters.domain_dest",
										"type": "Expression"
									},
									"db_dest": {
										"value": "@pipeline().parameters.db_dest",
										"type": "Expression"
									},
									"user_dest": {
										"value": "@pipeline().parameters.user_dest",
										"type": "Expression"
									},
									"pwd_dest": {
										"value": "@pipeline().parameters.pwd_dest",
										"type": "Expression"
									},
									"tab_dest": {
										"value": "@pipeline().parameters.tab_dest",
										"type": "Expression"
									},
									"sch_dest": {
										"value": "@pipeline().parameters.sch_dest",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"domain_src": {
						"type": "string"
					},
					"domain_dest": {
						"type": "string"
					},
					"db_src": {
						"type": "string"
					},
					"db_dest": {
						"type": "string"
					},
					"user_src": {
						"type": "string"
					},
					"user_dest": {
						"type": "string"
					},
					"pwd_src": {
						"type": "string"
					},
					"pwd_dest": {
						"type": "string"
					},
					"tab_src": {
						"type": "string"
					},
					"tab_dest": {
						"type": "string"
					},
					"sch_src": {
						"type": "string"
					},
					"sch_dest": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-02T13:43:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_dynamic_src1')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_dynamic_dest2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PP_set variable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "wrangling_copydata",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "filename_out",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"metadata": [
										{
											"name": "filename",
											"value": {
												"value": "@pipeline().parameters.filename",
												"type": "Expression"
											}
										}
									]
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet_test",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "filename_out",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "filename",
							"value": {
								"value": "@concat(pipeline().parameters.filename,'_',formatDateTime(utcNow(),'yyyy-mm-dd'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"variables": {
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T09:42:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppMDFaggregate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "aggempcount",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "mdfaggregate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"aggregatesource": {},
									"aggempcountout": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-29T16:00:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/mdfaggregate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_alterrow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "alterrow-emp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_alterrow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empalterrow": {},
									"sinkemp": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_alterrow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_derived_db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "derived_db",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_derived_db",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-04T00:36:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_derived_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_df_parameterise')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "copy datas from CSV to parquet",
				"activities": [
					{
						"name": "blob to blob",
						"description": "copy datas from csv to parquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csv1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Df_parameterise",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {
									"domain_src": {
										"value": "'@{pipeline().parameters.domain_src}'",
										"type": "Expression"
									},
									"user_src": {
										"value": "'@{pipeline().parameters.user_src}'",
										"type": "Expression"
									},
									"pwd_src": {
										"value": "'@{pipeline().parameters.pwd_src}'",
										"type": "Expression"
									},
									"tab_src": {
										"value": "'@{pipeline().parameters.tab_src}'",
										"type": "Expression"
									},
									"sch_src": {
										"value": "'@{pipeline().parameters.sch_src}'",
										"type": "Expression"
									},
									"db_src": {
										"value": "'@{pipeline().parameters.db_src}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {
										"db_src": {
											"value": "@pipeline().parameters.db_src",
											"type": "Expression"
										},
										"user_src": {
											"value": "@pipeline().parameters.user_src",
											"type": "Expression"
										},
										"pwd_src": {
											"value": "@pipeline().parameters.pwd_src",
											"type": "Expression"
										},
										"domain_src": {
											"value": "@pipeline().parameters.domain_src",
											"type": "Expression"
										},
										"tab_src": {
											"value": "@pipeline().parameters.tab_src",
											"type": "Expression"
										},
										"sch_src": {
											"value": "@pipeline().parameters.sch_src",
											"type": "Expression"
										}
									},
									"sink1": {
										"domain_dest": {
											"value": "@pipeline().parameters.domain_dest",
											"type": "Expression"
										},
										"db_dest": {
											"value": "@pipeline().parameters.db_dest",
											"type": "Expression"
										},
										"user_dest": {
											"value": "@pipeline().parameters.user_dest",
											"type": "Expression"
										},
										"pwd_dest": {
											"value": "@pipeline().parameters.pwd_dest",
											"type": "Expression"
										},
										"tab_dest": {
											"value": "@pipeline().parameters.tab_dest",
											"type": "Expression"
										},
										"sch_dest": {
											"value": "@pipeline().parameters.sch_dest",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"domain_src": {
						"type": "string"
					},
					"domain_dest": {
						"type": "string"
					},
					"db_src": {
						"type": "string"
					},
					"db_dest": {
						"type": "string"
					},
					"user_src": {
						"type": "string"
					},
					"user_dest": {
						"type": "string"
					},
					"pwd_src": {
						"type": "string"
					},
					"pwd_dest": {
						"type": "string"
					},
					"tab_src": {
						"type": "string"
					},
					"tab_dest": {
						"type": "string"
					},
					"sch_src": {
						"type": "string"
					},
					"sch_dest": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T09:42:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csv1')]",
				"[concat(variables('factoryId'), '/datasets/Parquet1')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "dep_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dept_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "dept_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dept_name",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_wrangling2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {
									"database_name": {
										"value": "@pipeline().parameters.databasename",
										"type": "Expression"
									},
									"sourcetable": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "ds_wrangling2",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"databasename": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T09:42:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling2')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_mdf_conditionalsplit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "conditionalsplitdept_id",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFconditionalsplitDEPT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employeedeptid": {},
									"csfinancesink": {},
									"csarchitectsink": {},
									"cstestingout": {},
									"csnodept": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-30T06:20:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFconditionalsplitDEPT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_mdf_exist_deptid')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "exist_deptid",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_exist_deptid",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employeedeptid": {},
									"deptsrc1": {},
									"csvexistdeptid": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-30T07:09:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_exist_deptid')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_mdf_unionemp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "union_emp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_union_emp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"financeemp": {},
									"testingout": {},
									"architectemp": {},
									"nodeptemp": {},
									"empunionsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-30T11:29:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_union_emp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_parameterise_copydata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Parameterised data copy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {
									"database_name": {
										"value": "@pipeline().parameters.database_name",
										"type": "Expression"
									},
									"sourcetable": {
										"value": "@pipeline().parameters.sourcetable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {
									"database_name": {
										"value": "@pipeline().parameters.database_name",
										"type": "Expression"
									},
									"destinationtab": {
										"value": "@pipeline().parameters.destinationtab",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"sourcetable": {
						"type": "string"
					},
					"destinationtab": {
						"type": "string"
					},
					"database_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-02T07:02:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_parquettocsv_delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "exceltodb1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "parquet to csv",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "parquet_setvariable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dest_csv",
								"type": "DatasetReference",
								"parameters": {
									"file_name": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "parquet_setvariable",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "file_name1",
							"value": {
								"value": "@concat(pipeline().parameters.file_name,'-',formatDateTime(utcNow(),'yyyy-mm-dd'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"variables": {
					"file_name1": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T17:24:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]",
				"[concat(variables('factoryId'), '/datasets/Parquet2')]",
				"[concat(variables('factoryId'), '/datasets/dest_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppmdffilter1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "filter1_dept_id",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dffilter",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SRCfilter1": {},
									"sinkfilterdeptid1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-29T16:00:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dffilter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sql_table1",
					"type": "LinkedServiceReference",
					"parameters": {
						"database_name": {
							"value": "@dataset().database_name",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"database_name": {
						"type": "string"
					},
					"sourcetable": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "emp_name",
						"type": "varchar"
					},
					{
						"name": "emp_salary",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().sourcetable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sql_table1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_dynamicval1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"database_name": {
						"type": "string"
					},
					"destinationtab": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "emp_name",
						"type": "varchar"
					},
					{
						"name": "emp_salary",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"table": {
						"value": "@dataset().destinationtab",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_dynamicval1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "emp_name",
						"type": "varchar"
					},
					{
						"name": "emp_salary",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage3_csv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputwrangling"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\r",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Error",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputwrangling"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp_file_2024-50-26",
						"container": "outputwrangling"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_wrangling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "part-00000-86e089be-2976-483d-b736-57afacb1bb47-c000.snappy.parquet",
						"container": "outputwrangling"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "UTF8"
					},
					{
						"name": "emp_name",
						"type": "UTF8"
					},
					{
						"name": "emp_salary",
						"type": "UTF8"
					},
					{
						"name": "dept_id",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_wrangling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_test')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(dataset().filename,'_',formatDateTime(utcNow(),'yyyy-mm-dd'))",
							"type": "Expression"
						},
						"container": "outputwrangling"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "UTF8"
					},
					{
						"name": "emp_name",
						"type": "UTF8"
					},
					{
						"name": "emp_salary",
						"type": "UTF8"
					},
					{
						"name": "dept_id",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_wrangling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp1.csv",
						"container": "input-src"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "emp_name",
						"type": "String"
					},
					{
						"name": "emp_salary ",
						"type": "String"
					},
					{
						"name": "manager",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delete_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputwrangling"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_wrangling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dest_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(dataset().file_name,'-',formatDateTime(utcNow(),'yyyy-mm-dd'))",
							"type": "Expression"
						},
						"container": "inputwrangling"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_wrangling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dest_db1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lk_dstdb1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_no",
						"type": "int",
						"precision": 10
					},
					{
						"name": "emp_name",
						"type": "varchar"
					},
					{
						"name": "salary",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp_temptab"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lk_dstdb1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/destsink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "destlink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "salary",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "re"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/destlink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_archi_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "architectout",
						"container": "input-src"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "emp_name",
						"type": "String"
					},
					{
						"name": "emp_salary",
						"type": "String"
					},
					{
						"name": "dept_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_wrangling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage3_csv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp_file.xlsx.txt",
						"container": "inputwrangling"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "emp_name",
						"type": "String"
					},
					{
						"name": "emp_salary",
						"type": "String"
					},
					{
						"name": "dept_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_nodept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "nodeptout",
						"container": "input-src"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "emp_name",
						"type": "String"
					},
					{
						"name": "emp_salary",
						"type": "String"
					},
					{
						"name": "dept_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_wrangling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_out')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage3_csv",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output-dest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_join')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('joinoutput','_',formatDateTime(utcNow()))",
							"type": "Expression"
						},
						"container": "outputwrangling"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Error",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_wrangling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_parquetout')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(dataset().filename,'_',formatDateTime(utcNow(),'yyyy-mm-dd'))",
							"type": "Expression"
						},
						"container": "outputwrangling"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_wrangling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_dynamic_dest2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sql_dynamicval2",
					"type": "LinkedServiceReference",
					"parameters": {
						"domain_dest": {
							"value": "@dataset().domain_dest",
							"type": "Expression"
						},
						"db_dest": {
							"value": "@dataset().db_dest",
							"type": "Expression"
						},
						"user_dest": {
							"value": "@dataset().user_dest",
							"type": "Expression"
						},
						"pwd_dest": {
							"value": "@dataset().pwd_dest",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"domain_dest": {
						"type": "String"
					},
					"db_dest": {
						"type": "String"
					},
					"user_dest": {
						"type": "String"
					},
					"pwd_dest": {
						"type": "String"
					},
					"tab_dest": {
						"type": "String"
					},
					"sch_dest": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().sch_dest",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tab_dest",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sql_dynamicval2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_dynamic_src1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_dynamicval1",
					"type": "LinkedServiceReference",
					"parameters": {
						"domain_namesrc": {
							"value": "@dataset().domain_src",
							"type": "Expression"
						},
						"user_namesrc": {
							"value": "@dataset().user_src",
							"type": "Expression"
						},
						"db_namesrc": {
							"value": "@dataset().db_src",
							"type": "Expression"
						},
						"pwd_src": {
							"value": "@dataset().pwd_src",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"db_src": {
						"type": "string"
					},
					"user_src": {
						"type": "string"
					},
					"pwd_src": {
						"type": "string"
					},
					"domain_src": {
						"type": "string"
					},
					"tab_src": {
						"type": "string"
					},
					"sch_src": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().sch_src",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tab_src",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_dynamicval1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_testing_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "testingout",
						"container": "input-src"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "emp_name",
						"type": "String"
					},
					{
						"name": "emp_salary",
						"type": "String"
					},
					{
						"name": "dept_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_wrangling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wrangling1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet2",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp_file12.xlsx",
						"container": "inputwrangling"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "emp_name",
						"type": "String"
					},
					{
						"name": "emp_salary",
						"type": "String"
					},
					{
						"name": "dept_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_wrangling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wrangling2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_wrangling",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DEPT.xlsx",
						"container": "inputwrangling"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "dep_id",
						"type": "String"
					},
					{
						"name": "dept_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_wrangling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/samjet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sourcelink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "amjet.xlsx",
						"container": "khancont"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sourcelink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_ex1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lk_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp tab.xlsx",
						"container": "conrg107"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Emp_no",
						"type": "String"
					},
					{
						"name": "Emp_name",
						"type": "String"
					},
					{
						"name": "Emp_salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lk_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage3_csv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage3_csv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase111')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase111_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase111_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase111_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase111_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sql_dynamicval2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"domain_dest": {
						"type": "String"
					},
					"db_dest": {
						"type": "String"
					},
					"user_dest": {
						"type": "String"
					},
					"pwd_dest": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('Sql_dynamicval2_properties_typeProperties_server')]",
					"database": "[parameters('Sql_dynamicval2_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('Sql_dynamicval2_properties_typeProperties_userName')]",
					"password": "@{linkedService().pwd_dest}"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_keyvoult')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('blob_keyvoult_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_wrangling')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('blob_wrangling_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/destlink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('destlink_properties_typeProperties_server')]",
					"database": "[parameters('destlink_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('destlink_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('destlink_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lk_dest_db1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('lk_dest_db1_properties_typeProperties_server')]",
					"database": "[parameters('lk_dest_db1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('lk_dest_db1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('lk_dest_db1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lk_destdb1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('lk_destdb1_properties_typeProperties_server')]",
					"database": "[parameters('lk_destdb1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('lk_destdb1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('lk_destdb1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lk_dstdb1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('lk_dstdb1_properties_typeProperties_server')]",
					"database": "[parameters('lk_dstdb1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('lk_dstdb1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('lk_dstdb1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lk_excel1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('lk_excel1_properties_typeProperties_server')]",
					"database": "[parameters('lk_excel1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('lk_excel1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('lk_excel1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lk_exceldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('lk_exceldb_properties_typeProperties_server')]",
					"database": "[parameters('lk_exceldb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('lk_exceldb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('lk_exceldb_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lk_source')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('lk_source_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lk_source1excel')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('lk_source1excel_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lk_src_ex1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('lk_src_ex1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lk_srcex1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('lk_srcex1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lk_srcexl1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('lk_srcexl1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_sql_table1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"database_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('lnk_sql_table1_properties_typeProperties_server')]",
					"database": "[parameters('lnk_sql_table1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('lnk_sql_table1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('lnk_sql_table1_password')]"
					},
					"alwaysEncryptedSettings": {
						"alwaysEncryptedAkvAuthType": "ManagedIdentity"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_sql_table2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"database_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('lnk_sql_table2_properties_typeProperties_server')]",
					"database": "[parameters('lnk_sql_table2_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('lnk_sql_table2_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('lnk_sql_table2_password')]"
					},
					"alwaysEncryptedSettings": {
						"alwaysEncryptedAkvAuthType": "ManagedIdentity"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sourcelink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('sourcelink_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_dynamicval1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"domain_namesrc": {
						"type": "String"
					},
					"user_namesrc": {
						"type": "String"
					},
					"db_namesrc": {
						"type": "string"
					},
					"pwd_src": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('sql_dynamicval1_properties_typeProperties_server')]",
					"database": "[parameters('sql_dynamicval1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('sql_dynamicval1_properties_typeProperties_userName')]",
					"password": "@{linkedService().pwd_src}"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('sqldb_properties_typeProperties_server')]",
					"database": "[parameters('sqldb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('sqldb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('sqldb_password')]"
					},
					"alwaysEncryptedSettings": {
						"alwaysEncryptedAkvAuthType": "ManagedIdentity"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg1_sc')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pp_parquettocsv_delete",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 8,
						"startTime": "2024-11-17T22:42:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pp_parquettocsv_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_sto')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ppmdffilter1",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/input-trg/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trg_sto_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ppmdffilter1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_tumb')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pp_parquettocsv_delete",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2024-12-02T22:48:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pp_parquettocsv_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_exist_deptid')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference"
							},
							"name": "employeedeptid"
						},
						{
							"dataset": {
								"referenceName": "ds_wrangling2",
								"type": "DatasetReference"
							},
							"name": "deptsrc1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "csvexistdeptid"
						}
					],
					"transformations": [
						{
							"name": "empdeptidexist"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeedeptid",
						"source(output(",
						"          dep_id as string,",
						"          dept_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> deptsrc1",
						"employeedeptid, deptsrc1 exists(dept_id == dep_id,",
						"     negate:true,",
						"     broadcast: 'auto')~> empdeptidexist",
						"empdeptidexist sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['existdeptid'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> csvexistdeptid"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]",
				"[concat(variables('factoryId'), '/datasets/ds_wrangling2')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_union_emp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_csv_input",
								"type": "DatasetReference"
							},
							"name": "financeemp"
						},
						{
							"dataset": {
								"referenceName": "ds_testing_emp",
								"type": "DatasetReference"
							},
							"name": "testingout"
						},
						{
							"dataset": {
								"referenceName": "ds_archi_emp",
								"type": "DatasetReference"
							},
							"name": "architectemp"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_nodept",
								"type": "DatasetReference"
							},
							"name": "nodeptemp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "empunionsink"
						}
					],
					"transformations": [
						{
							"name": "unionemp"
						},
						{
							"name": "unionselectemp"
						},
						{
							"name": "sortemp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> financeemp",
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> testingout",
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> architectemp",
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> nodeptemp",
						"financeemp, testingout, architectemp, nodeptemp union(byName: true)~> unionemp",
						"unionemp select(mapColumn(",
						"          emp_id,",
						"          emp_names = emp_name,",
						"          dept_id,",
						"          emp_salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> unionselectemp",
						"unionselectemp sort(asc(emp_names, true)) ~> sortemp",
						"sortemp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as integer,",
						"          emp_name as string,",
						"          emp_salary as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> empunionsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_csv_input')]",
				"[concat(variables('factoryId'), '/datasets/ds_testing_emp')]",
				"[concat(variables('factoryId'), '/datasets/ds_archi_emp')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_nodept')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFconditionalsplitDEPT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference"
							},
							"name": "employeedeptid"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "csfinancesink"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "csarchitectsink"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "cstestingout"
						},
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "csnodept"
						}
					],
					"transformations": [
						{
							"name": "departmentsoutput"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeedeptid",
						"employeedeptid split(equals(dept_id,'100'),",
						"     equals(dept_id,'101'),",
						"     equals(dept_id,'102'),",
						"     disjoint: false) ~> departmentsoutput@(financeout, testingout, architectout, nodept)",
						"departmentsoutput@financeout sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['financeout'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> csfinancesink",
						"departmentsoutput@architectout sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['architectout'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> csarchitectsink",
						"departmentsoutput@testingout sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['testingout'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> cstestingout",
						"departmentsoutput@nodept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['nodeptout'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> csnodept"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFderived-json')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_csv_input",
								"type": "DatasetReference"
							},
							"name": "srcexDF1",
							"description": "import data from source "
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as integer,",
						"          emp_name as string,",
						"          emp_salary as integer,",
						"          dept_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcexDF1",
						"srcexDF1 derive(emp_name = lower(emp_name),",
						"          salary = emp_salary+100) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     format: 'table') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_csv_input')]",
				"[concat(variables('factoryId'), '/datasets/Json1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_dynamic_src1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_dynamic_dest2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     domain_src as string,",
						"     user_src as string,",
						"     pwd_src as string,",
						"     tab_src as string,",
						"     sch_src as string,",
						"     db_src as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_dynamic_src1')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_dynamic_dest2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_alterrow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference"
							},
							"name": "empalterrow"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "sinkemp"
						}
					],
					"transformations": [
						{
							"name": "alterRowfun1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as integer,",
						"          emp_name as string,",
						"          emp_salary as integer,",
						"          dept_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empalterrow",
						"empalterrow alterRow(deleteIf(emp_id==8),",
						"     updateIf(emp_name=='nirmal')) ~> alterRowfun1",
						"alterRowfun1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as integer,",
						"          emp_name as string,",
						"          emp_salary as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_derived_db')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_csv_input",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as integer,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(emp_name = initCap(emp_name),",
						"          bonus = emp_salary+10000) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as integer,",
						"          emp_name as string,",
						"          emp_salary as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_csv_input')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_window1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference"
							},
							"name": "windowsource1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "windowemppartician1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as integer,",
						"          emp_name as string,",
						"          emp_salary as integer,",
						"          dept_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> windowsource1",
						"windowsource1 window(over(dept_id),",
						"     desc(emp_salary, true),",
						"     avg_salary = avg(emp_salary),",
						"          densernk = denseRank()) ~> windowemppartician1",
						"windowemppartician1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['emp_partician'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dffilter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference"
							},
							"name": "SRCfilter1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "sinkfilterdeptid1"
						}
					],
					"transformations": [
						{
							"name": "filterdeptid"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SRCfilter1",
						"SRCfilter1 filter(equals(dept_id,'100')) ~> filterdeptid",
						"filterdeptid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkfilterdeptid1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mappingdataflow_join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "ds_wrangling2",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_join",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joincondition"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          dep_id as string,",
						"          dept_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dept",
						"employee, dept join(dept_id == dep_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joincondition",
						"joincondition sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Name as string,",
						"          Category as string,",
						"          Status as string,",
						"          Error as string",
						"     ),",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]",
				"[concat(variables('factoryId'), '/datasets/ds_wrangling2')]",
				"[concat(variables('factoryId'), '/datasets/ds_join')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mdfaggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference"
							},
							"name": "aggregatesource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_csv_out",
								"type": "DatasetReference"
							},
							"name": "aggempcountout"
						}
					],
					"transformations": [
						{
							"name": "empcount"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as string,",
						"          emp_name as string,",
						"          emp_salary as string,",
						"          dept_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> aggregatesource",
						"aggregatesource aggregate(groupBy(dept_id),",
						"     aggregatedcount = count(emp_id)) ~> empcount",
						"empcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['aggregatedcount'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> aggempcountout"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]",
				"[concat(variables('factoryId'), '/datasets/ds_csv_out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ds_wrangling1",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ds_wrangling1",
							"dataset": {
								"referenceName": "ds_wrangling1",
								"type": "DatasetReference"
							}
						},
						{
							"name": "ds_wrangling2",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ds_wrangling2",
							"dataset": {
								"referenceName": "ds_wrangling2",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared ds_wrangling1 = let AdfDoc = AzureStorage.BlobContents(\"https://amjetstorage.blob.core.windows.net/inputwrangling/emp_file12.xlsx\"), Excel = Excel.Workbook(AdfDoc),ExcelSheet = Excel{[Item=\"Sheet2\",Kind=\"Sheet\"]}[Data], PromotedHeaders = Table.PromoteHeaders(ExcelSheet, [PromoteAllScalars = true]) in PromotedHeaders;\r\nshared ds_wrangling2 = let AdfDoc = AzureStorage.BlobContents(\"https://amjetstorage.blob.core.windows.net/inputwrangling/DEPT.xlsx\"), Excel = Excel.Workbook(AdfDoc),ExcelSheet = Excel{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data], PromotedHeaders = Table.PromoteHeaders(ExcelSheet, [PromoteAllScalars = true]) in PromotedHeaders;\r\nshared UserQuery = let Source = #\"ds_wrangling1\",\r\n  #\"Merged queries\" = Table.NestedJoin(Source, {\"dept_id\"}, ds_wrangling2, {\"dep_id\"}, \"ds_wrangling2\", JoinKind.Inner),\r\n  #\"Expanded ds_wrangling2\" = Table.ExpandTableColumn(#\"Merged queries\", \"ds_wrangling2\", {\"dept_name\"}, {\"dept_name\"}),\r\n  #\"Grouped rows\" = Table.Group(#\"Expanded ds_wrangling2\", {\"dept_id\"}, {{\"std_in_dept\", each Table.RowCount(_), Int64.Type}}) in #\"Grouped rows\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wrangling1')]",
				"[concat(variables('factoryId'), '/datasets/ds_wrangling2')]"
			]
		}
	]
}